import EvaluatePiece as EVAL
import unittest

class TestEval(unittest.TestCase):
	def setUp(self):
		pass

	def test_isdefended_simple(self):
		test_board = (
		[[ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,100,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,330,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0]])
		test_pos = (4, 3)

		result = EVAL.is_defended(test_pos, test_board)
		print(result)

		assert result == 7

		test_board = (
		[[ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,330,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,100,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0]])

		assert EVAL.is_defended(test_pos, test_board) == 15

		test_board = (
		[[ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,100,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,100,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0]])

		assert EVAL.is_defended(test_pos, test_board) == 7

	def test_isattacked_simple(self):
		test_board = (
		[[ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,331,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,100,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0]])
		test_pos = (4, 3)

		assert EVAL.is_attacked(test_pos, test_board) == -8

		test_board = (
		[[ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,101,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,330,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0]])

		assert EVAL.is_attacked(test_pos, test_board) == -15

		test_board = (
		[[ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,101,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,100,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0]])

		assert EVAL.is_attacked(test_pos, test_board) == -8

		test_board = (
		[[ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,100,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0]])

		assert EVAL.is_attacked(test_pos, test_board) == -8

	def test_evalpiece_simple(self):
		test_board = (
		[[ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,101,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,100,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0]])
		test_pos = (3, 3)

		assert EVAL.eval_piece(test_pos, test_board) == -16


		test_board = (
		[[ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,101,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,100,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,330,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0]])

		assert EVAL.eval_piece(test_pos, test_board) == -1

		test_board = (
		[[ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,101,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,100,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,331,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0],
		 [ 0,  0,  0,  0,  0,  0,  0,  0]])

		assert EVAL.eval_piece(test_pos, test_board) == -16


if __name__ == '__main__':
	unittest.main()
